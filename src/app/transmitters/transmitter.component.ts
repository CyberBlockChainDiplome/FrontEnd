import { Component, OnInit } from '@angular/core';
import {Transmitter} from "./transmitter.model";
import {Diploma} from "../diploma/diploma.model";
import {TransmitterService} from "./transmitter.service";
import {switchMap} from "rxjs";
import {DiplomaService} from "../diploma/diploma.service";
import {Receiver} from "../receiver/receiver.model";
import {AuthService} from "../auth/auth.service";
import {User} from "../user/user.model";
import {SignupInfo} from "../auth/signup-info";

@Component({
  selector: 'app-transmitter',
  templateUrl: './transmitter.component.html',
  styleUrls: ['./transmitter.component.css']
})
export class TransmitterComponent implements OnInit {
  transmitterList?: Transmitter[];
  values: string[] = [];
  listTransmitter: string[][] = [];
  numberTransmitterInList: number = 0;
  filterValue: string = '';
  originalTransmitterList: Transmitter[] = [];

  userList: User[] = [];
  signupInfo?: SignupInfo;
  isSignedUp = false;
  isSignUpFailed = false;
  errorMessage = '';


  constructor(private transmitterService: TransmitterService, private authService: AuthService) {
  }

  ngOnInit() {
    this.getTransmitter();
    this.getUsers();
  }
  getTransmitter(): void {
    this.transmitterService.getTransmitter()
      .subscribe(transmitterList => {
        this.transmitterList = transmitterList;
        this.originalTransmitterList = transmitterList;
        this.transmitterService.totalItems.next(this.transmitterList.length);
        console.log(this.transmitterList);
      });
  }
  getUsers(): void {
    this.authService.getUsers()
      .subscribe(userList => {
        this.userList = userList;
      });
  }
  filterTable() {
    // Convertir la valeur de filtrage en minuscules pour une comparaison insensible à la casse
    const filter = this.filterValue.toLowerCase();

    if (filter === '') {
      // Restaurer la liste complète des étudiants
      this.transmitterList = this.originalTransmitterList;
    } else {
      // Appliquer le filtre au tableau
      this.transmitterList = this.originalTransmitterList.filter((transmitter) =>
        transmitter.lastname.toLowerCase().includes(filter)
      );
    }
  }
  add(firstname: string, lastname: string, email: string, telephone: string, identifier: string): void {
    if( firstname == null || lastname == null || email == null || telephone == null || identifier == null ){
      return;
    }
    let password: string = "transmitter123";
    const transmitter: Transmitter = {
      id: 0, // Assign 0 for the ID as it will be generated by the backend
      firstname: firstname.trim(),
      lastname: lastname.trim(),
      email: email.trim(),
      telephone: telephone.trim(),
      identifier: identifier.trim(),
    };
    /*
    this.transmitterService.addTransmitter(transmitter)
      .subscribe({
        next: (transmitter: Transmitter) => { this.transmitterList?.push(transmitter); },
        error: () => {},
        complete: () => {
          if (this.transmitterList != undefined) {
            this.transmitterService.totalItems.next(this.transmitterList.length);
            console.log(this.transmitterList.length);
          }
        }
  });
     */
    this.signupInfo = new SignupInfo(
      identifier,
      firstname,
      lastname,
      email,
      telephone,
      ["transmitter"],
      password);

    this.authService.signUp(this.signupInfo).subscribe(
      data => {
        console.log(data);
        this.isSignedUp = true;
        this.isSignUpFailed = false;
        this.getTransmitter();
      },
      error => {
        console.log(error);
        this.errorMessage = error.error.message;
        this.isSignUpFailed = true;
      }
    );
  }

  delete(transmitter: Transmitter): void {
    let check = true;
    try {
      this.userList = this.userList?.filter(user => user?.username !== transmitter?.identifier);
      this.authService.deleteUser(transmitter.identifier).subscribe(() => {
        // for automatic update of number of users in parent component
        if (this.userList != undefined) {
          this.transmitterService.totalItems.next(this.userList.length);
          console.log(this.userList.length);
        }
      });
    } catch (error) {
      console.error(error);
      check = false;
    }
    if(check){
      this.transmitterList = this.transmitterList?.filter(c => c !== transmitter);
      this.transmitterService.deleteTransmitter(transmitter).subscribe(() => {
          // for automatic update of number of transmitter in parent component
          if(this.transmitterList != undefined) {
            this.transmitterService.totalItems.next(this.transmitterList.length);
            console.log(this.transmitterList.length);
          }
        }
      );
    }
  }

  deleteAll(): void {
    this.transmitterService.deleteTransmitter().subscribe(() => {
        if(this.transmitterList != undefined) {
          this.transmitterList.length = 0;
        }
      }
    );
  }

  update(firstname: string, lastname: string, email: string, telephone: string, identifier: string, chosenToUpdateTransmitter:Transmitter):void {
    let id = chosenToUpdateTransmitter.id;
    firstname = firstname.trim();
    lastname = lastname.trim();
    email = email.trim();
    telephone = telephone.trim();
    identifier = identifier.trim();
    console.log(id);
    if (id != undefined) {
      this.transmitterService.updateTransmitter({firstname, lastname, email, telephone, identifier} as Transmitter, id)
        .subscribe({
          next: (transmitter: Transmitter) => {
            if (this.transmitterList != undefined) {
              let index = this.transmitterList?.indexOf(chosenToUpdateTransmitter);
              this.transmitterList[index] = transmitter;
            }
          },
          error: () => {
          },
          complete: () => {
            if (this.transmitterList != undefined) {
              this.transmitterService.totalItems.next(this.transmitterList.length);
              console.log(this.transmitterList.length);
            }
          }
        })
    }
  }

  addStandBy(firstname: string, lastname: string, email: string, telephone: string, identifier: string): void {
    firstname = firstname.trim();
    lastname = lastname.trim();
    email = email.trim();
    telephone = telephone.trim();
    identifier = identifier.trim();

    this.values = [firstname, lastname, email, telephone, identifier];
    this.listTransmitter.push(this.values);
  }

  putAll(listTransmitter: string[][]): void {
    this.transmitterService.deleteTransmitter().subscribe(() => {
        if (this.transmitterList != undefined) {
          this.transmitterList.length = 0;
        }
      }
    );
    for (const transmitterList of listTransmitter) {
      let firstname: string = transmitterList[this.numberTransmitterInList];
      this.numberTransmitterInList++;
      let lastname: string = transmitterList[this.numberTransmitterInList];
      this.numberTransmitterInList++;
      let email: string = transmitterList[this.numberTransmitterInList];
      this.numberTransmitterInList++;
      let telephone: string = transmitterList[this.numberTransmitterInList];
      this.numberTransmitterInList++;
      let identifier: string = transmitterList[this.numberTransmitterInList];
      this.numberTransmitterInList = 0;

      firstname = firstname.trim();
      lastname = lastname.trim();
      email = email.trim();
      telephone = telephone.trim();
      identifier = identifier.trim();
      this.transmitterService.addTransmitter({ firstname, lastname, email, telephone, identifier } as Transmitter)
        .subscribe({
          next: (transmitter: Transmitter) => {
            this.transmitterList?.push(transmitter);
            this.transmitterService.getTransmitter().subscribe(transmitter => {
              this.transmitterList = transmitter;
              this.transmitterService.totalItems.next(this.transmitterList.length);
            });
          },
          error: () => {},
          complete: () => {}
        });
    }
    this.listTransmitter = [];
  }
  partialUpdate(chosenToUpdateTransmitter: Transmitter, firstname?: string, lastname?: string, email?: string, telephone?: string, identifier?: string): void {
    const id = chosenToUpdateTransmitter.id;
    if (id !== undefined) {
      const updates: Partial<Transmitter> = {};
      if (firstname) {
        updates.firstname = firstname.trim();
      }
      if (lastname) {
        updates.lastname = lastname.trim();
      }
      if (email) {
        updates.email = email.trim();
      }
      if (telephone) {
        updates.telephone = telephone.trim();
      }
      if (identifier) {
        updates.identifier = identifier.trim();
      }
      this.transmitterService.partialUpdateTransmitter(updates, id).pipe(
        switchMap(() => this.transmitterService.getTransmitter()) // update the transmitter list after partial update
      ).subscribe({
        next: (transmitter: Transmitter[]) => {
          this.transmitterList = transmitter;
        },
        error: () => {
        },
        complete: () => {
          this.transmitterService.totalItems.next(this.transmitterList?.length || 0);
        }
      });
    }
  }
  deleteList() {
    this.listTransmitter = [];
  }
}

